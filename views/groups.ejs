<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Group Chat</title>
    <link href="/css/styles.css" rel="stylesheet" />
    <style>
        .groups-container {
            display: grid;
            grid-template-columns: 250px 1fr;
            height: calc(100vh - 60px);
        }

        .groups-sidebar {
            background: #f5f5f5;
            border-right: 1px solid #ddd;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .groups-list {
            flex: 1;
            overflow-y: auto;
        }

        .group-item {
            padding: 0.5rem;
            cursor: pointer;
            border-radius: 4px;
            margin-bottom: 0.5rem;
        }

        .group-item:hover {
            background: #e9ecef;
        }

        .group-item.active {
            background: #007bff;
            color: white;
        }

        .create-group-form {
            padding: 1rem;
            border-top: 1px solid #ddd;
        }

        .group-chat {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .chat-header {
            padding: 1rem;
            border-bottom: 1px solid #ddd;
            background: #fff;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .message-group {
            display: flex;
            flex-direction: column;
            max-width: 70%;
            margin: 0.5rem 0;
        }

        .message-group.sent {
            align-self: flex-end;
        }

        .message-group.received {
            align-self: flex-start;
        }

        .message-content {
            padding: 0.5rem 1rem;
            border-radius: 1rem;
            background: #e9ecef;
        }

        .sent .message-content {
            background: #007bff;
            color: white;
        }

        .message-sender {
            font-size: 0.8rem;
            color: #666;
            margin-bottom: 0.2rem;
        }

        .chat-input {
            padding: 1rem;
            border-top: 1px solid #ddd;
            background: #fff;
            display: flex;
            gap: 1rem;
        }

        .chat-input input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            background: #007bff;
            color: white;
        }

        .btn:hover {
            background: #0056b3;
        }

        .btn-secondary {
            background: #6c757d;
        }

        .btn-secondary:hover {
            background: #545b62;
        }
    </style>
</head>
<body>
    <nav>
        <div class="left-nav">
            <h1>Chat App</h1>
        </div>

        <div class="right-nav">
            <ul>
                <li><a class="links" href="/all-members">Browse All Members</a></li>
                <li><a class="links" href="/direct">Direct Messages</a></li>
                <li><a class="links" href="/requests?user=<%=username%>">View Requests</a></li>
                <li class="links"><%= username %></li>
            </ul>
            <button class="logout" onclick="logout()">Logout</button>
        </div>
    </nav>

    <div class="groups-container">
        <div class="groups-sidebar">
            <h2>All Groups</h2>
            <p style="color: #666; font-size: 0.9rem; margin: 0.5rem 0;">
                Click on any group to join the conversation
            </p>
            <div class="groups-list" id="groupsList">
                <!-- Groups will be populated here -->
            </div>
            <div class="create-group-form">
                <a href="/create-group" class="btn" style="display: block; text-align: center; text-decoration: none;">Create New Group</a>
            </div>
        </div>

        <div class="group-chat">
            <div class="chat-header">
                <h2 id="currentGroupName">Select a Group</h2>
                <div id="groupMembers"></div>
            </div>
            <div class="chat-messages" id="chatMessages">
                <!-- Messages will be populated here -->
            </div>
            <div class="chat-input">
                <input type="text" id="messageInput" placeholder="Type your message..." onkeypress="handleKeyPress(event)" />
                <button class="btn" onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <script>
        let ws;
        let currentGroup = null;
        const username = "<%= username %>";

        window.onload = function() {
            connectWebSocket();
            loadGroups();
        };

        function connectWebSocket() {
            ws = new WebSocket(`ws://localhost:8000/?username=${username}`);
            
            ws.onopen = function() {
                console.log('Connected to WebSocket');
            };

            ws.onmessage = function(event) {
                const message = JSON.parse(event.data);
                if (message.type === 'GROUP_MESSAGE' && message.room === currentGroup) {
                    appendMessage(message);
                }
            };

            ws.onerror = function(error) {
                console.error('WebSocket error:', error);
            };

            ws.onclose = function() {
                console.log('WebSocket connection closed');
                setTimeout(connectWebSocket, 1000); // Reconnect after 1 second
            };
        }

        async function loadGroups() {
            try {
                const response = await fetch('/groups/list');
                const data = await response.json();
                const groupsList = document.getElementById('groupsList');
                groupsList.innerHTML = '';
                
                data.rooms.forEach(room => {
                    const div = document.createElement('div');
                    div.className = 'group-item';
                    div.textContent = room;
                    div.onclick = () => joinGroup(room);
                    groupsList.appendChild(div);
                });
            } catch (error) {
                console.error('Error loading groups:', error);
            }
        }

        async function createGroup() {
            const nameInput = document.getElementById('newGroupName');
            const name = nameInput.value.trim();
            
            if (!name) return;

            try {
                const response = await fetch('/groups/create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name })
                });

                if (response.ok) {
                    nameInput.value = '';
                    loadGroups();
                    joinGroup(name);
                }
            } catch (error) {
                console.error('Error creating group:', error);
            }
        }

        async function joinGroup(room) {
            try {
                const response = await fetch('/groups/join', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ room })
                });

                if (response.ok) {
                    currentGroup = room;
                    document.getElementById('currentGroupName').textContent = room;
                    loadGroupMessages(room);
                    
                    // Update active group in sidebar
                    document.querySelectorAll('.group-item').forEach(item => {
                        item.classList.remove('active');
                        if (item.textContent === room) {
                            item.classList.add('active');
                        }
                    });
                }
            } catch (error) {
                console.error('Error joining group:', error);
            }
        }

        async function loadGroupMessages(room) {
            try {
                const response = await fetch(`/groups/${room}/messages`);
                const data = await response.json();
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.innerHTML = '';
                
                data.messages.forEach(message => {
                    appendMessage({
                        from: message.from,
                        content: message.content,
                        timestamp: new Date(message.createdAt)
                    });
                });

                chatMessages.scrollTop = chatMessages.scrollHeight;
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        function appendMessage(message) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message-group ${message.from === username ? 'sent' : 'received'}`;
            
            messageDiv.innerHTML = `
                <div class="message-sender">${message.from}</div>
                <div class="message-content">${message.content}</div>
            `;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function sendMessage() {
            const input = document.getElementById('messageInput');
            const content = input.value.trim();
            
            if (!content || !currentGroup) return;

            const message = {
                messageType: 'GROUP',
                room: currentGroup,
                from: username,
                content: content
            };

            ws.send(JSON.stringify(message));
            input.value = '';

            // Append own message immediately
            appendMessage({
                from: username,
                content: content,
                timestamp: new Date()
            });
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        function logout() {
            fetch('/logout').then(() => window.location.reload());
        }
    </script>
</body>
</html> 